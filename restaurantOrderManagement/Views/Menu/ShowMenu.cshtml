@{
    ViewData["Title"] = "Menu Page";
}

@model restaurantOrderManagement.ViewModels.MenuViewModel

<style>
    body {
        font-family: 'Arial', sans-serif;
        background-color: #121212;
        color: #e0e0e0;
        margin: 0;
        padding: 0;
    }

    h1 {
        color: #f4b400;
        text-align: center;
        margin-top: 20px;
        font-size: 2.5rem;
    }

    .menu-container {
        max-width: 90%;
        margin: 30px auto;
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        padding: 20px;
        background-color: #1e1e1e;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.6);
    }

    .menu-item {
        background-color: #2a2a2a;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .menu-item:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 12px rgba(0, 0, 0, 0.5);
        }

        .menu-item img {
            width: 100%;
            height: 150px;
            object-fit: cover;
            border-bottom: 2px solid #f4b400;
        }

    .menu-item-content {
        padding: 15px;
        text-align: center;
    }

    .menu-item-title {
        font-size: 1.25rem;
        color: #f4b400;
        margin-bottom: 8px;
    }

    .menu-item-description {
        font-size: 0.9rem;
        color: #cfcfcf;
        margin-bottom: 12px;
        height: 40px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .menu-item-price {
        font-size: 1.5rem;
        font-weight: bold;
        color: #f4b400;
        text-align: center;
        margin-top: 10px;
    }

    .filter-container {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .dropdown, .search-input {
        padding: 10px 15px;
        border: 1px solid #333;
        border-radius: 4px;
        background-color: #1e1e1e;
        color: #e0e0e0;
        font-size: 1rem;
    }

        .dropdown:focus, .search-input:focus {
            outline: none;
            border-color: #f4b400;
            box-shadow: 0 0 8px #f4b400;
        }
</style>

<div class="table-container">
    <h1 class="display-4">Menu List</h1>

    <div class="filter-container">
        <select id="categoryDropdown" class="dropdown">
            <option value="All">All Categories</option>
            @foreach (var category in Model.menuItems.Select(m => m.categoryname).Distinct())
            {
                <option value="@category">@category</option>
            }
        </select>
        <input type="text" id="searchInput" class="search-input" placeholder="Search for food items...">
    </div>

    @if (Model.menuItems != null && Model.menuItems.Any())
    {
        <div class="menu-container">
            @foreach (var menuitem in Model.menuItems)
            {
                <div class="menu-item" data-category="@menuitem.categoryname">
                    <img src="@Url.Content(menuitem.foodpictureurl)" alt="@menuitem.foodname" />
                    <div class="menu-item-content">
                        <div class="menu-item-title">@menuitem.foodname</div>
                        <div class="menu-item-description">@menuitem.fooddescription</div>
                        <div class="menu-item-price">₹@menuitem.foodprice</div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="no-data">No menu items available.</div>
    }
</div>

<script>
    const categoryDropdown = document.getElementById('categoryDropdown');
    const searchInput = document.getElementById('searchInput');

    function filterMenu() {
        const selectedCategory = categoryDropdown.value.toLowerCase();
        const searchFilter = searchInput.value.toLowerCase();
        const menuItems = document.querySelectorAll('.menu-item');

        menuItems.forEach(item => {
            const category = item.getAttribute('data-category').toLowerCase();
            const text = item.innerText.toLowerCase();

            const categoryMatch = selectedCategory === 'all' || category === selectedCategory;
            const searchMatch = text.includes(searchFilter);

            item.style.display = categoryMatch && searchMatch ? '' : 'none';
        });
    }

    categoryDropdown.addEventListener('change', filterMenu);
    searchInput.addEventListener('input', filterMenu);
</script>
